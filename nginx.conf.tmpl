worker_processes 1;

events {
    worker_connections 1024;
}

http {
    resolver ${NAMESERVER} valid=5s;

    server {
        listen 8080;
        server_name variable-request-reverse-proxy;
        charset ${CHARSET};

        proxy_set_header    X-Real-IP              $remote_addr;
        proxy_set_header    X-Forwarded-Host       $host;
        proxy_set_header    X-Forwarded-Server     $host;
        proxy_set_header    X-Forwarded-For        $proxy_add_x_forwarded_for;
        proxy_set_header    X-Auth-Token           ${X_AUTH_TOKEN};

        proxy_connect_timeout       3600;
        proxy_send_timeout          3600;
        proxy_read_timeout          3600;
        send_timeout                3600;

        error_log   /var/log/nginx/error.log   warn;

        location /proxy {
            internal;
            proxy_pass $url;
        }

        location ~ ^/get/([a-zA-Z0-9.-_:]+)/(.+) {
            set $domain $1;
            set $path $2;
            set $url '';
            set $protocol "${PROTOCOL}";
            set $response_content_type "${CONTENT_TYPE}";

            access_by_lua '
                ngx.header.content_type = ngx.var.response_content_type
                ngx.var.url = ngx.var.protocol .. "://" .. ngx.var.domain .. "/" .. ngx.var.path
                local res = ngx.location.capture_multi {
                    {"/proxy", {method = ngx.HTTP_GET, share_all_vars = true}}
                }

                if res.status == 200 then
                    if ngx.var.response_content_type == "text/html" then
                        ngx.header.content_encoding = "gzip"
                    end
                    ngx.say(res.body)
                elseif res.status == 301 or res.status == 302 then
                    local redirect_url = res.header["Location"]
                    local r = ngx.re.match(redirect_url, "(http|https):\\\\/\\\\/(.+)", "oj")
                    local redirect_protocol = r[1]
                    local redirect_path = r[2]
                    local redirect_url = "http://localhost:3003/get/" .. redirect_path

                    return ngx.redirect(redirect_url)
                else
                    ngx.say(ngx.var.url)
                end
            ';
        }

        location ~ ^/post/([a-zA-Z0-9.-_:]+)/(.+) {
            set $domain $1;
            set $path $2;
            set $url '';
            set $protocol "${PROTOCOL}";
            set $proxy_location "${PROXY_LOCATION}";

            access_by_lua '
                local args, err = ngx.req.get_uri_args()
                local body = ""

                if not args._body then
                    more_set_headers "Content-Encoding: gzip";
                    local map = {}
                    for k, v in pairs(args) do
                        table.insert(map, k.."="..v)
                    end
                    body = table.concat(map, "&")
                    ngx.req.set_header("Content-Type", "application/x-www-form-urlencoded")
                else
                    body = args._body
                    ngx.req.set_header("Content-Type", "application/json")
                end

                ngx.var.url = ngx.var.protocol .. "://" .. ngx.var.domain .. "/" .. ngx.var.path
                local res = ngx.location.capture_multi {
                    {"/proxy", {method = ngx.HTTP_POST, body = body, share_all_vars = true}}
                }
                ngx.print(res.body)
            ';
        }

        location ~ ^/put/([a-zA-Z0-9.-_:]+)/(.+) {
            set $domain $1;
            set $path $2;
            set $url '';
            set $protocol "${PROTOCOL}";
            set $proxy_location "${PROXY_LOCATION}";

            access_by_lua '
                local args, err = ngx.req.get_uri_args()
                local body = ""

                if not args._body then
                    more_set_headers "Content-Encoding: gzip";
                    local map = {}
                    for k, v in pairs(args) do
                        table.insert(map, k.."="..v)
                    end
                    body = table.concat(map, "&")
                    ngx.req.set_header("Content-Type", "application/x-www-form-urlencoded")
                else
                    body = args._body
                    ngx.req.set_header("Content-Type", "application/json")
                end

                ngx.var.url = ngx.var.protocol .. "://" .. ngx.var.domain .. "/" .. ngx.var.path
                local res = ngx.location.capture_multi {
                    {"/proxy", {method = ngx.HTTP_PUT, body = body, share_all_vars = true}}
                }
                ngx.print(res.body)
            ';
        }

        location ~ ^/delete/([a-zA-Z0-9.-_:]+)/(.+) {
            set $domain $1;
            set $path $2;
            set $url '';
            set $protocol "${PROTOCOL}";
            set $proxy_location "${PROXY_LOCATION}";

            access_by_lua '
                ngx.var.url = ngx.var.protocol .. "://" .. ngx.var.domain .. "/" .. ngx.var.path
                local res = ngx.location.capture_multi {
                    {"/proxy", {method = ngx.HTTP_DELETE, share_all_vars = true}}
                }
                ngx.print(res.body)
            ';
        }
    }
}